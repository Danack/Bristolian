<?php

namespace Bristolian\ApiController;

use SlimDispatcher\Response\JsonResponse;
use Bristolian\Service\Mailgun\PayloadValidator;
use VarMap\VarMap;
use Bristolian\App;

class MailgunEmailHandler
{

    // https://bristolian.org/api/mail

    public function handleIncomingEmail(
        PayloadValidator $payloadValidator,
        VarMap $varMap
    ): JsonResponse {

        if ($payloadValidator->validate($varMap) === false) {
            return new JsonResponse(['error' => 'invalid payload'], [], 406);
        }

        $filename = "incoming_email_" . date(App::DATE_TIME_FORMAT) . ".json";

        \Safe\file_put_contents(
            __DIR__ . "/../../../data/$filename",
            json_encode($varMap->toArray(), JSON_PRETTY_PRINT)
        );


        return new JsonResponse(['success' => 'Signature passed'], [], 406);
    }

//200 (Success) When Mailgun receives this code, it will determine the webhook POST is successful and will not be retried.
//406 (Not Applicable)  When this code is received, Mailgun will determine the POST is rejected and it will not be retried.
//Any other code    Mailgun will try POSTing according to the schedule (below) for webhooks other than the delivery notification.
}



// Parameter	Type	Description

$email_properties = [

'recipient', // string	The recipient of the message as reported by MAIL TO during SMTP chat
'sender', // string	The sender of the message as reported by MAIL FROM during SMTP chat. Note: this value may differ from From MIME header
'from', // string	The sender of the message as reported by from message header, for example "Bob <bob@example.com>"
'subject', // string	Subject string
'Body-plain', // string	The text version of the email. This field is always present. If the incoming message only has HTML body, Mailgun will create a text representation for you.
'stripped-text', //string	The text version of the message without quoted parts and signature block (if found)
'stripped-signature', // string	The signature block stripped from the plain text message (if found)
'body-html', // string	The HTML version of the message, if message was multipart. Note that all parts of the message will be posted, not just text/html. For instance, if a message arrives with "foo" part it will be posted as "body-foo"
'stripped-html', // string	The HTML version of the message, without quoted parts.
'Attachment-count', // 	int	The number of attachments the message has.
'Attachment-x', // 	string	The attached file ('x' stands for number of the attachment). Attachments are handled as file uploads, encoded as multipart/form-data.
'timestamp', // int	The number of seconds passed since January 1, 1970 (see securing web hooks)
'token', // string	A randomly generated string with a length of 50 (See securing webhooks)
'signature', // string	A string with hexadecimal digits generated by HMAC algorithm (see securing webhooks).
'message-headers', // 	string	A list of MIME headers dumped to a JSON string (order of headers is preserved)
'Content-id-map', // 	string	JSON-encoded dictionary which maps Content-ID (CID) of each attachment to the corresponding attachment-x parameter. This allows you to map posted attachments to tags like <img src='cid'> in the message body.


];



// MIME Messages Parameters
$mime_parameter = [
'Parameter', // Type	Description
'recipient', // string	The recipient of the message
'sender', // string	The sender of the message as reported by SMTP MAIL FROM
'from', // string	The sender of the message as reported by from message header, for example "Bob <bob@example.com>".
'subject', // string	The subject string
'Body-mime', // string	The full MIME envelope. You will need a MIME parsing library to process this data.
'timestamp', // int	The number of seconds passed since January 1, 1970 (See Securing Webhooks)
'token', // string	A randomly generated string with a length of 50 (See Securing Webhooks)
'signature', // string	A string with hexadecimal digits generated by HMAC algorithm (See securing webhooks).
];

//$_POST['signature'] === hash_hmac('sha256', $_POST['timestamp'] . $_POST['token'], 'example-api-key);